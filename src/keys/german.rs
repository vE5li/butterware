use super::*;

pub const DE_CIRC: Key = GRAVE; // ^ (dead)
pub const DE_1: Key = N1; // 1
pub const DE_2: Key = N2; // 2
pub const DE_3: Key = N3; // 3
pub const DE_4: Key = N4; // 4
pub const DE_5: Key = N5; // 5
pub const DE_6: Key = N6; // 6
pub const DE_7: Key = N7; // 7
pub const DE_8: Key = N8; // 8
pub const DE_9: Key = N9; // 9
pub const DE_0: Key = N0; // 0
pub const DE_SS: Key = MINUS; // ß
pub const DE_ACUT: Key = EQUAL; // ´ (dead)
pub const DE_Q: Key = Q; // Q
pub const DE_W: Key = W; // W
pub const DE_E: Key = E; // E
pub const DE_R: Key = R; // R
pub const DE_T: Key = T; // T
pub const DE_Z: Key = Y; // Z
pub const DE_U: Key = U; // U
pub const DE_I: Key = I; // I
pub const DE_O: Key = O; // O
pub const DE_P: Key = P; // P
pub const DE_UDIA: Key = LEFTBRACE; // Ü
pub const DE_PLUS: Key = RIGHTBRACE; // +
pub const DE_A: Key = A; // A
pub const DE_S: Key = S; // S
pub const DE_D: Key = D; // D
pub const DE_F: Key = F; // F
pub const DE_G: Key = G; // G
pub const DE_H: Key = H; // H
pub const DE_J: Key = J; // J
pub const DE_K: Key = K; // K
pub const DE_L: Key = L; // L
pub const DE_ODIA: Key = SEMICOLON; // Ö
pub const DE_ADIA: Key = APOSTROPHE; // Ä
pub const DE_HASH: Key = HASHTILDE; // #
pub const DE_LABK: Key = NONUS_BACKSLASH; // <
pub const DE_Y: Key = Z; // Y
pub const DE_X: Key = X; // X
pub const DE_C: Key = C; // C
pub const DE_V: Key = V; // V
pub const DE_B: Key = B; // B
pub const DE_N: Key = N; // N
pub const DE_M: Key = M; // M
pub const DE_COMM: Key = COMMA; // ,
pub const DE_DOT: Key = DOT; // .
pub const DE_MINS: Key = SLASH; // -
pub const DE_DEG: Key = DE_CIRC.shift(); // °
pub const DE_EXLM: Key = DE_1.shift(); // !
pub const DE_DQUO: Key = DE_2.shift(); // "
pub const DE_SECT: Key = DE_3.shift(); // §
pub const DE_DLR: Key = DE_4.shift(); // $
pub const DE_PERC: Key = DE_5.shift(); // %
pub const DE_AMPR: Key = DE_6.shift(); // &
pub const DE_SLSH: Key = DE_7.shift(); // /
pub const DE_LPRN: Key = DE_8.shift(); // (
pub const DE_RPRN: Key = DE_9.shift(); // )
pub const DE_EQL: Key = DE_0.shift(); // =
pub const DE_QUES: Key = DE_SS.shift(); // ?
pub const DE_GRV: Key = DE_ACUT.shift(); // ` (dead)
pub const DE_ASTR: Key = DE_PLUS.shift(); // *
pub const DE_QUOT: Key = DE_HASH.shift(); // '
pub const DE_RABK: Key = DE_LABK.shift(); // >
pub const DE_SCLN: Key = DE_COMM.shift(); // ;
pub const DE_COLN: Key = DE_DOT.shift(); // :
pub const DE_UNDS: Key = DE_MINS.shift(); // _
pub const DE_SUP2: Key = DE_2.alt_gr(); // ²
pub const DE_SUP3: Key = DE_3.alt_gr(); // ³
pub const DE_LCBR: Key = DE_7.alt_gr(); // {
pub const DE_LBRC: Key = DE_8.alt_gr(); // [
pub const DE_RBRC: Key = DE_9.alt_gr(); // ]
pub const DE_RCBR: Key = DE_0.alt_gr(); // }
pub const DE_BSLS: Key = DE_SS.alt_gr(); // (backslash)
pub const DE_AT: Key = DE_Q.alt_gr(); // @
pub const DE_EURO: Key = DE_E.alt_gr(); // €
pub const DE_TILD: Key = DE_PLUS.alt_gr(); // ~
pub const DE_PIPE: Key = DE_LABK.alt_gr(); // |
pub const DE_MICR: Key = DE_M.alt_gr(); // µ
